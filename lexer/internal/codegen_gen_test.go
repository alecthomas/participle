
// Code generated by Participle. DO NOT EDIT.
package internal_test

import (
	"io"
	"regexp"
	"strings"
	"sync"
	"unicode/utf8"

	"github.com/alecthomas/participle/v2"
	"github.com/alecthomas/participle/v2/lexer"
)

var (
	Lexer lexer.Definition = definitionImpl{}
	backrefCache sync.Map
	codegenBackrefRe = regexp.MustCompile(`\\+\d`)
)

type definitionImpl struct {}

func (definitionImpl) Symbols() map[string]lexer.TokenType {
	return map[string]lexer.TokenType{
		"Char": -11,
		"EOF": -1,
		"Escaped": -8,
		"Expr": -10,
		"ExprEnd": -6,
		"Ident": -5,
		"Oper": -4,
		"String": -7,
		"StringEnd": -9,
		"Whitespace": -3,
	}
}

func (definitionImpl) LexString(filename string, s string) (lexer.Lexer, error) {
	return &lexerImpl{
		s: s,
		pos: lexer.Position{
			Filename: filename,
			Line:     1,
			Column:   1,
		},
		states: []lexerState{ {name: "Root"} },
	}, nil
}

func (d definitionImpl) LexBytes(filename string, b []byte) (lexer.Lexer, error) {
	return d.LexString(filename, string(b))
}

func (d definitionImpl) Lex(filename string, r io.Reader) (lexer.Lexer, error) {
	s := &strings.Builder{}
	_, err := io.Copy(s, r)
	if err != nil {
		return nil, err
	}
	return d.LexString(filename, s.String())
}

type lexerState struct {
	name    string
	groups  []string
}

type lexerImpl struct {
	s       string
	pos     lexer.Position
	states  []lexerState
}

// https://github.com/golang/go/issues/31666
func decodeRune(p string) (r rune, size int) {
	if len(p) > 0 && p[0] < utf8.RuneSelf {
		return rune(p[0]), 1
	}
	return utf8.DecodeRuneInString(p)
}


func (l *lexerImpl) Next() (lexer.Token, error) {
	if l.s == "" {
		return lexer.EOFToken(l.pos), nil
	}
	var (
		state = l.states[len(l.states)-1]
		groups []int
		sym lexer.TokenType
	)
	switch state.name {

	case "Expr":if match := matchString(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -7
			l.states = append(l.states, lexerState{
				name: "String",
			})
		} else if match := matchWhitespace(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -3
		} else if match := matchOper(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -4
		} else if match := matchIdent(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -5
		} else if match := matchExprEnd(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -6
			l.states = l.states[:len(l.states)-1]
		}
	case "Root":if match := matchString(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -7
			l.states = append(l.states, lexerState{
				name: "String",
			})
		}
	case "String":if match := matchEscaped(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -8
		} else if match := matchStringEnd(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -9
			l.states = l.states[:len(l.states)-1]
		} else if match := matchExpr(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -10
			l.states = append(l.states, lexerState{
				name: "Expr",
			})
		} else if match := matchChar(state.groups, l.s); match[0] == 0 && match[1] != 0 {
			groups = match[:]
			sym = -11
		}
	}
	if groups == nil {
		sample := []rune(l.s)
		if len(sample) > 16 {
			sample = append(sample[:16], []rune("...")...)
		}
		return lexer.Token{}, participle.Errorf(l.pos, "invalid input text %q", string(sample))
	}
	pos := l.pos
	span := l.s[:groups[1]]
	l.s = l.s[groups[1]:]
	l.pos.Advance(span)
	return lexer.Token{
		Type:  sym,
		Value: span,
		Pos:   pos,
	}, nil
}


// "
func matchString(groups []string, s string) (matches [2]int) {
p := 0
if p < len(s) && s[p] == '"' {
matches[0] = p
matches[1] = p + 1
}
return
}

// [\t-\n\f-\r ]+
func matchWhitespace(groups []string, s string) (matches [2]int) {
p := 0
// [\t-\n\f-\r ] (CharClass)
l0 := func(s string, p int) int {
if len(s) <= p { return -1 }
rn := s[p]
switch {
case rn >= '\t' && rn <= '\n': return p+1
case rn >= '\f' && rn <= '\r': return p+1
case rn == ' ': return p+1
}
return -1
}
// [\t-\n\f-\r ]+ (Plus)
l1 := func(s string, p int) int {
if p = l0(s, p); p == -1 { return -1 }
for len(s) > p {
if np := l0(s, p); np == -1 { return p } else { p = np }
}
return p
}
np := l1(s, p)
if np == -1 {
  return
}
matches[0] = p
matches[1] = np
return
}

// [%\*-\+\-/]
func matchOper(groups []string, s string) (matches [2]int) {
p := 0
// [%\*-\+\-/] (CharClass)
l0 := func(s string, p int) int {
if len(s) <= p { return -1 }
rn := s[p]
switch {
case rn == '%': return p+1
case rn >= '*' && rn <= '+': return p+1
case rn == '-': return p+1
case rn == '/': return p+1
}
return -1
}
np := l0(s, p)
if np == -1 {
  return
}
matches[0] = p
matches[1] = np
return
}

// [0-9A-Z_a-z]+
func matchIdent(groups []string, s string) (matches [2]int) {
p := 0
// [0-9A-Z_a-z] (CharClass)
l0 := func(s string, p int) int {
if len(s) <= p { return -1 }
rn := s[p]
switch {
case rn >= '0' && rn <= '9': return p+1
case rn >= 'A' && rn <= 'Z': return p+1
case rn == '_': return p+1
case rn >= 'a' && rn <= 'z': return p+1
}
return -1
}
// [0-9A-Z_a-z]+ (Plus)
l1 := func(s string, p int) int {
if p = l0(s, p); p == -1 { return -1 }
for len(s) > p {
if np := l0(s, p); np == -1 { return p } else { p = np }
}
return p
}
np := l1(s, p)
if np == -1 {
  return
}
matches[0] = p
matches[1] = np
return
}

// \}
func matchExprEnd(groups []string, s string) (matches [2]int) {
p := 0
if p < len(s) && s[p] == '}' {
matches[0] = p
matches[1] = p + 1
}
return
}

// \\(?-s:.)
func matchEscaped(groups []string, s string) (matches [2]int) {
p := 0
// \\ (Literal)
l0 := func(s string, p int) int {
if p < len(s) && s[p] == '\\' { return p+1 }
return -1
}
// (?-s:.) (AnyCharNotNL)
l1 := func(s string, p int) int {
var (rn rune; n int)
if s[p] < utf8.RuneSelf {
  rn, n = rune(s[p]), 1
} else {
  rn, n = utf8.DecodeRuneInString(s[p:])
}
if len(s) <= p+n || rn == '\n' { return -1 }
return p+n
}
// \\(?-s:.) (Concat)
l2 := func(s string, p int) int {
if p = l0(s, p); p == -1 { return -1 }
if p = l1(s, p); p == -1 { return -1 }
return p
}
np := l2(s, p)
if np == -1 {
  return
}
matches[0] = p
matches[1] = np
return
}

// "
func matchStringEnd(groups []string, s string) (matches [2]int) {
p := 0
if p < len(s) && s[p] == '"' {
matches[0] = p
matches[1] = p + 1
}
return
}

// \$\{
func matchExpr(groups []string, s string) (matches [2]int) {
p := 0
if p+2 < len(s) && s[p:p+2] == "${" {
matches[0] = p
matches[1] = p + 2
}
return
}

// [^"\$\\]+
func matchChar(groups []string, s string) (matches [2]int) {
p := 0
// [^"\$\\] (CharClass)
l0 := func(s string, p int) int {
if len(s) <= p { return -1 }
var (rn rune; n int)
if s[p] < utf8.RuneSelf {
  rn, n = rune(s[p]), 1
} else {
  rn, n = utf8.DecodeRuneInString(s[p:])
}
switch {
case rn >= '\x00' && rn <= '!': return p+1
case rn == '#': return p+1
case rn >= '%' && rn <= '[': return p+1
case rn >= ']' && rn <= '\U0010ffff': return p+n
}
return -1
}
// [^"\$\\]+ (Plus)
l1 := func(s string, p int) int {
if p = l0(s, p); p == -1 { return -1 }
for len(s) > p {
if np := l0(s, p); np == -1 { return p } else { p = np }
}
return p
}
np := l1(s, p)
if np == -1 {
  return
}
matches[0] = p
matches[1] = np
return
}
