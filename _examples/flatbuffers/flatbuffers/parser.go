// Code generated by antlr2participle. DO NOT EDIT.
package flatbuffers

import (
	"github.com/alecthomas/participle/v2"
	"github.com/alecthomas/participle/v2/lexer"
)

var (
	Rules = lexer.Rules{
		"Root": {
			{"ATTRIBUTE", `attribute`, nil},
			{"ENUM", `enum`, nil},
			{"FILE_EXTENSION", `file_extension`, nil},
			{"FILE_IDENTIFIER", `file_identifier`, nil},
			{"INCLUDE", `include`, nil},
			{"NATIVE_INCLUDE", `native_include`, nil},
			{"NAMESPACE", `namespace`, nil},
			{"ROOT_TYPE", `root_type`, nil},
			{"RPC_SERVICE", `rpc_service`, nil},
			{"STRUCT", `struct`, nil},
			{"TABLE", `table`, nil},
			{"UNION", `union`, nil},
			{"SEMI", `;`, nil},
			{"EQ", `=`, nil},
			{"LP", `\(`, nil},
			{"RP", `\)`, nil},
			{"LB", `\[`, nil},
			{"RB", `\]`, nil},
			{"LC", `\{`, nil},
			{"RC", `\}`, nil},
			{"DOT", `\.`, nil},
			{"COMMA", `,`, nil},
			{"COLON", `:`, nil},
			{"PLUS", `\+`, nil},
			{"MINUS", `-`, nil},
			{"STRING_CONSTANT", `"(([^"\\\r\n]|(\\['"?bfnrtv\\/]|\\x([0-9a-fA-F])+|\\u([0-9a-fA-F])+))+)?"`, nil},
			{"BASE_TYPE_NAME", `(bool|byte|ubyte|short|ushort|int|uint|float|long|ulong|double|int8|uint8|int16|uint16|int32|uint32|int64|uint64|float32|float64|string)`, nil},
			{"INTEGER_CONSTANT", `([-+]?([0-9])+|true|false)`, nil},
			{"IDENT", `[a-zA-Z_][a-zA-Z0-9_]*`, nil},
			{"HEX_INTEGER_CONSTANT", `[-+]?0[xX]([0-9a-fA-F])+`, nil},
			{"FLOAT_CONSTANT", `(\+|-)?((([0-9])+\.(([0-9])+)?((e|E)(\+|-)?([0-9])+)?|([0-9])+(e|E)(\+|-)?([0-9])+|\.([0-9])+((e|E)(\+|-)?([0-9])+)?)|inf|nan)`, nil},
			{"block_comment", `/\*.*?\*/`, nil},
			{"comment", `//[^\r\n]*`, nil},
			{"ws", `[ \t\r\n]`, nil},
		},
	}
	Lexer  = lexer.MustStateful(Rules, lexer.MatchLongest())
	Parser = participle.MustBuild(
		&Schema{},
		participle.Lexer(Lexer),
		participle.UseLookahead(2),
	)
)

type Schema struct {
	Include                                                                                                     []*Include                                                                                                     `@@*`
	NamespaceDeclTypeDeclEnumDeclUnionDeclRootDeclFileExtensionDeclFileIdentifierDeclAttributeDeclRpcDeclObject []*NamespaceDeclTypeDeclEnumDeclUnionDeclRootDeclFileExtensionDeclFileIdentifierDeclAttributeDeclRpcDeclObject `@@*`
}
type NamespaceDeclTypeDeclEnumDeclUnionDeclRootDeclFileExtensionDeclFileIdentifierDeclAttributeDeclRpcDeclObject struct {
	NamespaceDecl      *NamespaceDecl      `@@`
	TypeDecl           *TypeDecl           `| @@`
	EnumDecl           *EnumDecl           `| @@`
	UnionDecl          *UnionDecl          `| @@`
	RootDecl           *RootDecl           `| @@`
	FileExtensionDecl  *FileExtensionDecl  `| @@`
	FileIdentifierDecl *FileIdentifierDecl `| @@`
	AttributeDecl      *AttributeDecl      `| @@`
	RpcDecl            *RpcDecl            `| @@`
	Object             *Object             `| @@`
}
type Include struct {
	Include        *string `( @INCLUDE`
	NativeInclude  *string `| @NATIVE_INCLUDE )`
	StringConstant *string `@STRING_CONSTANT`
	Semi           *string `@SEMI`
}
type NamespaceDecl struct {
	Namespace     *string          `@NAMESPACE`
	Identifier    *Identifier      `@@`
	DotIdentifier []*DotIdentifier `@@*`
	Semi          *string          `@SEMI`
}
type DotIdentifier struct {
	Dot        *string     `@DOT`
	Identifier *Identifier `@@`
}
type AttributeDecl struct {
	Attribute      *string `@ATTRIBUTE`
	StringConstant *string `@STRING_CONSTANT`
	Semi           *string `@SEMI`
}
type TypeDecl struct {
	Table      *string      `( @TABLE`
	Struct     *string      `| @STRUCT )`
	Identifier *Identifier  `@@`
	Metadata   *Metadata    `@@`
	Lc         *string      `@LC`
	FieldDecl  []*FieldDecl `( @@ )*`
	Rc         *string      `@RC`
}
type EnumDecl struct {
	Enum                *string              `@ENUM`
	Identifier          *Identifier          `@@`
	Colon               *string              `( @COLON`
	Type                *Type                `@@ )?`
	Metadata            *Metadata            `@@`
	Lc                  *string              `@LC`
	CommasepEnumvalDecl *CommasepEnumvalDecl `@@`
	Rc                  *string              `@RC`
}
type UnionDecl struct {
	Union                        *string                       `@UNION`
	Identifier                   *Identifier                   `@@`
	Metadata                     *Metadata                     `@@`
	Lc                           *string                       `@LC`
	CommasepUnionvalWithOptAlias *CommasepUnionvalWithOptAlias `@@`
	Rc                           *string                       `@RC`
}
type RootDecl struct {
	RootType   *string     `@ROOT_TYPE`
	Identifier *Identifier `@@`
	Semi       *string     `@SEMI`
}
type FieldDecl struct {
	Identifier *Identifier `@@`
	Colon      *string     `@COLON`
	Type       *Type       `@@`
	Eq         *string     `( @EQ`
	Scalar     *Scalar     `@@ )?`
	Metadata   *Metadata   `@@`
	Semi       *string     `@SEMI`
}
type RpcDecl struct {
	RpcService *string      `@RPC_SERVICE`
	Identifier *Identifier  `@@`
	Lc         *string      `@LC`
	RpcMethod  []*RpcMethod `@@+`
	Rc         *string      `@RC`
}
type RpcMethod struct {
	Identifier  *Identifier `@@`
	Lp          *string     `@LP`
	Identifier2 *Identifier `@@`
	Rp          *string     `@RP`
	Colon       *string     `@COLON`
	Identifier3 *Identifier `@@`
	Metadata    *Metadata   `@@`
	Semi        *string     `@SEMI`
}
type Type struct {
	Lb           *string       `@LB`
	Type         *Type         `@@`
	Colon        *string       `( @COLON`
	IntegerConst *IntegerConst `@@ )?`
	Rb           *string       `@RB`
	BaseTypeName *string       `| @BASE_TYPE_NAME`
	NsIdent      *NsIdent      `| @@`
}
type EnumvalDecl struct {
	NsIdent      *NsIdent      `@@`
	Eq           *string       `( @EQ`
	IntegerConst *IntegerConst `@@ )?`
}
type CommasepEnumvalDecl struct {
	EnumvalDecl      *EnumvalDecl        `@@`
	CommaEnumvalDecl []*CommaEnumvalDecl `@@*`
	Comma            *string             `@COMMA?`
}
type CommaEnumvalDecl struct {
	Comma       *string      `@COMMA`
	EnumvalDecl *EnumvalDecl `@@`
}
type UnionvalWithOptAlias struct {
	NsIdent      *NsIdent      `@@`
	Colon        *string       `( @COLON`
	NsIdent2     *NsIdent      `@@ )?`
	Eq           *string       `( @EQ`
	IntegerConst *IntegerConst `@@ )?`
}
type CommasepUnionvalWithOptAlias struct {
	UnionvalWithOptAlias      *UnionvalWithOptAlias        `@@`
	CommaUnionvalWithOptAlias []*CommaUnionvalWithOptAlias `@@*`
	Comma                     *string                      `@COMMA?`
}
type CommaUnionvalWithOptAlias struct {
	Comma                *string               `@COMMA`
	UnionvalWithOptAlias *UnionvalWithOptAlias `@@`
}
type IdentWithOptSingleValue struct {
	Identifier  *Identifier  `@@`
	Colon       *string      `( @COLON`
	SingleValue *SingleValue `@@ )?`
}
type CommasepIdentWithOptSingleValue struct {
	IdentWithOptSingleValue      *IdentWithOptSingleValue        `@@`
	CommaIdentWithOptSingleValue []*CommaIdentWithOptSingleValue `@@*`
}
type CommaIdentWithOptSingleValue struct {
	Comma                   *string                  `@COMMA`
	IdentWithOptSingleValue *IdentWithOptSingleValue `@@`
}
type Metadata struct {
	Lp                              *string                          `( @LP`
	CommasepIdentWithOptSingleValue *CommasepIdentWithOptSingleValue `@@`
	Rp                              *string                          `@RP )?`
}
type Scalar struct {
	IntegerConstant    *string     `@INTEGER_CONSTANT`
	HexIntegerConstant *string     `| @HEX_INTEGER_CONSTANT`
	FloatConstant      *string     `| @FLOAT_CONSTANT`
	Identifier         *Identifier `| @@`
}
type Object struct {
	Lc                     *string                 `@LC`
	CommasepIdentWithValue *CommasepIdentWithValue `@@`
	Rc                     *string                 `@RC`
}
type IdentWithValue struct {
	Identifier *Identifier `@@`
	Colon      *string     `@COLON`
	Value      *Value      `@@`
}
type CommasepIdentWithValue struct {
	IdentWithValue      *IdentWithValue        `@@`
	CommaIdentWithValue []*CommaIdentWithValue `@@*`
	Comma               *string                `@COMMA?`
}
type CommaIdentWithValue struct {
	Comma          *string         `@COMMA`
	IdentWithValue *IdentWithValue `@@`
}
type SingleValue struct {
	Scalar         *Scalar `@@`
	StringConstant *string `| @STRING_CONSTANT`
}
type Value struct {
	SingleValue   *SingleValue   `@@`
	Object        *Object        `| @@`
	Lb            *string        `| @LB`
	CommasepValue *CommasepValue `@@`
	Rb            *string        `@RB`
}
type CommasepValue struct {
	Value      *Value        `@@`
	CommaValue []*CommaValue `@@*`
	Comma      *string       `@COMMA?`
}
type CommaValue struct {
	Comma *string `@COMMA`
	Value *Value  `@@`
}
type FileExtensionDecl struct {
	FileExtension  *string `@FILE_EXTENSION`
	StringConstant *string `@STRING_CONSTANT`
	Semi           *string `@SEMI`
}
type FileIdentifierDecl struct {
	FileIdentifier *string `@FILE_IDENTIFIER`
	StringConstant *string `@STRING_CONSTANT`
	Semi           *string `@SEMI`
}
type NsIdent struct {
	Identifier    *Identifier      `@@`
	DotIdentifier []*DotIdentifier `@@*`
}
type IntegerConst struct {
	IntegerConstant    *string `@INTEGER_CONSTANT`
	HexIntegerConstant *string `| @HEX_INTEGER_CONSTANT`
}
type Identifier struct {
	Ident    *string   `@IDENT`
	Keywords *Keywords `| @@`
}
type Keywords struct {
	Attribute      *string `@ATTRIBUTE`
	Enum           *string `| @ENUM`
	FileExtension  *string `| @FILE_EXTENSION`
	FileIdentifier *string `| @FILE_IDENTIFIER`
	Include        *string `| @INCLUDE`
	NativeInclude  *string `| @NATIVE_INCLUDE`
	Namespace      *string `| @NAMESPACE`
	RootType       *string `| @ROOT_TYPE`
	RpcService     *string `| @RPC_SERVICE`
	Struct         *string `| @STRUCT`
	Table          *string `| @TABLE`
	Union          *string `| @UNION`
}
